// THE PASSWORD GAME, CS320, Isaiah Aquino, Naomi Ocompo, Allan Sur

#include <string>
#include <iostream>
#include <list>
#include <iterator>
#include <fstream>
#include <sstream>
#include <chrono>
#include <algorithm>

using namespace std;

class TokenDetector 
{
    private:
        list<string> mylist;
        int tokenCounter = 0;
    public:
        list<string> getUnique(string txtfile) 
        {
            ifstream infile(txtfile); //open the file
            string line;
            
            while (getline(infile, line)) { 
                //take each line from input.txt
                
                if (line.size() > 0) {
                    line = strip(line);
                    stringstream ss(line);
                    string word;

                    while(getline(ss, word, ' ')) { 
                        //take every token separated by ' '
                        bool unique = true;
                        
                        for(list<string>::iterator it = mylist.begin(); it != mylist.end(); ++it) {
                            //Check to make sure it is a unique token before input in list
                            if (word == *it) { 
                                unique = false; 
                                break;
                            }
                            else {unique = true;}
                        }
                        if (unique) { 
                            mylist.push_back(word);
                            tokenCounter++;
                        } 
                    }    
                } 
            }
            return mylist;
        }

        string strip(string line)
        {
            //Brute force removes special characters
            for (int i = 0; i < line.size(); i++) {
                if ((line[i] < 'A' || line[i] > 'Z') && (line[i] != '-') &&
                    (line[i] < 'a' || line[i] > 'z') && (line[i] != ' ') && (line[i] != '\'')) {
                    line.erase(i, 1);
                    i--;
                }
            }
            return line;
        }

        void printTokens() {
            for (list<string>::iterator it = mylist.begin(); it != mylist.end(); ++it) {
                cout << *it << "\n";
            }
        }

        int tokenCount() {
            return tokenCounter;
        }
};

class PasswordGenerator 
{
    friend class PasswordGuesser;
    private:
        int iteration;
        list<string> listOfWords;
        int passwordLength;
        int sizeOfList;
        list<string> listOfPermutations;
        int numOfPerms;
        int combCount;
    public:

        PasswordGenerator(list<string> inputList)
        {
            listOfWords = inputList;
            sizeOfList = inputList.size();
            iteration = 0;
            numOfPerms = 0;
        }
    
        string getRandomPassword(int numWords)
        {
            //returns a randomly generated password from the stored list
        
            string fullPassword;
            int indexUsed[20];
        
            for(int i = 0; i < numWords; i++){
                bool usedFlag = false;
                int random = rand() % listOfWords.size();
                list<string>::iterator it = listOfWords.begin();

                for (int j = 0; j < i; j++) {
                    //check to see if word was already used
                    if (random == indexUsed[j]) {
                        usedFlag = true;
                        i--;
                    }
                }
                if (!usedFlag) {
                    //add to fullPassword
                    advance(it, random);
                    string word = *it;
                    if (i != 0) { fullPassword.append(" "); }
                    fullPassword.append(word);
                    indexUsed[i] = random;
                }
            }

            return fullPassword;
        }

        void setIterationLength(int numWords)
        {
            passwordLength = numWords;
        }
    
        string next()
        {
            // sort through listOfPermutations
            if (hasNext()) {
                list<string>::iterator it = listOfPermutations.begin();
                advance(it, iteration);
                string password = *it;
                iteration++;
                return password;
            }
            else {return "Error";}
        }

        void findPermutations() {
            int repeat = factorial(sizeOfList - passwordLength);
            list<string>::iterator it = listOfWords.begin();
            list<string> list = listOfWords;
            int i = 0;
            do {
                string pass = "";
                for (int i = 0; i < passwordLength; i++) {
                    it = list.begin();
                    if (i != 0) { pass.append(" "); }
                    advance(it, i);
                    pass.append(*it);
                }
                listOfPermutations.push_back(pass);
                numOfPerms++;
                for (int i = 1; i != repeat; ++i) {
                    next_permutation(list.begin(),list.end());
                }
                if (numOfPerms == combCount) { break; }
            } while (next_permutation(list.begin(),list.end()));
        }
    
        bool hasNext()
        {
            if(iteration != numOfPerms){
                return true;
            }
            else {
                return false;
            }
        }

        unsigned int combinationCount(unsigned int n, unsigned int r) {
            combCount = factorial(n) / factorial(n-r);
            return combCount;
        }

        int factorial(int n) {
            if(n > 1) { return n * factorial(n - 1); }
            else { return 1; } 
        }
   
};

class PasswordGuesser
{
    private:
        list<string> listOfWords;
        string finalPassword;
        int passwordLength;
        unsigned long int guessTime;
        unsigned long int nextTime;
        bool guessFlag = false;
        bool nextFlag = false;
    public:
        PasswordGuesser(list<string> list, string password, int passLength) {
            listOfWords = list; 
            finalPassword = password;
            passwordLength = passLength;
            guessTime = 0;
            nextTime = 0;

            auto start = chrono::steady_clock::now();
            guessThread();
            auto end = chrono::steady_clock::now();
            guessTime = chrono::duration_cast<chrono::microseconds>(end - start).count();
            
            start = chrono::steady_clock::now();
            nextThread();
            end = chrono::steady_clock::now();
            nextTime = chrono::duration_cast<chrono::microseconds>(end - start).count();

            if (guessFlag && nextFlag) { update(); }
            else { cout << "ERROR"; }
            
        }

        void guessThread() {
            // creates a temp PassGenerator object and loops until getRandomPassword finds a password that matches finalPassword
            
            PasswordGenerator temp = PasswordGenerator(listOfWords);
            string testPass;

            while (true) {
                testPass = temp.getRandomPassword(passwordLength);
                if (testPass == finalPassword) { 
                    notify("guess");
                    break;
                }
            }
        }
        
        void nextThread() {
            // creates a temp PassGenerator object and loops until next() finds a password that matches finalPassword

            string testPass = "";
            PasswordGenerator temp = PasswordGenerator(listOfWords);
            temp.setIterationLength(passwordLength);
            temp.combinationCount(listOfWords.size(), passwordLength);
            temp.findPermutations();


            while (temp.hasNext()) {
                testPass = temp.next();
                if (testPass == finalPassword) { 
                    notify("next"); 
                    break;
                }
            }
        }

        void update() {
            cout << "Password Guessed!" << "\n";
            cout << "Guessing Function took: " << guessTime << "ns" << "\n";
            cout << "Iterative Function took: " << nextTime << "ns" << "\n";
            cout << "Exiting..." << "\n";
        }

        void notify(string key) {
            if (key == "guess") {
                guessFlag = true;
            }
            else if (key == "next") {
                nextFlag = true;
            }
        }

};

int main(int argc, char** argv)
{
    // Check if valid input txt file when loading .exe  (".\PasswordGame.exe inputfile.txt")
    if (argc > 1) {
        cout << "\n" << "inputFile = " << argv[1] << endl;
    } 
    else {
        cout << "No file name entered. Exiting...";
        return -1;
    }

    ifstream infile(argv[1]);
    if (infile.is_open() && infile.good()) {

        // Reading txt file
        TokenDetector file;
        list<string> mylist = file.getUnique(argv[1]);
        int tokens = file.tokenCount();
        cout << "Number of unique tokens: " << tokens << "\n";

        // Main Menu
        unsigned int length;
        cout << "Enter desired password length: ";
        cin >> length;
        if (length <= file.tokenCount()) {

            PasswordGenerator newPass(mylist);
            string generatedPass;

            // Combinations
            unsigned int combinations = newPass.combinationCount(tokens, length);
            cout << "\n" << "There are " << combinations << " different password combinations." << "\n";
            
            // Generate password
            while (1) {
                char input;
                generatedPass = newPass.getRandomPassword(length);
                cout << "\n" << "Random password generated: " << "\"" << generatedPass << "\"" << "\n";
                cout << "Would you like to get a different password? (Y/N): ";
                cin >> input;
                if (input == 'Y' || input == 'y') { continue; }
                else if (input == 'N'|| input == 'n') { break; }
                else { cout << "\n" << "Invalid input. Generating new password."; }
            }
            
            // Password guesser
            cout << "\n" << "System guessing password..." << "\n";
            PasswordGuesser guess(mylist, generatedPass, length);
            return 0;
        }
        else {
            cout << "Invalid password length. Exiting...";
            return 0;
        }
    }
    else { cout << "Failed to open file. Exiting..."; }

    return 0;
}
